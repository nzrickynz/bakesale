// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  VOLUNTEER
  PUBLIC
}

model User {
  id             String       @id @default(cuid())
  name           String?
  email          String       @unique
  emailVerified  DateTime?
  image          String?
  passwordHash   String
  role           UserRole     @default(PUBLIC)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  // Organization relationships
  adminOf       Organization[] @relation("OrganizationAdmin")
  userOrganizations UserOrganization[]

  // Volunteer relationships
  managedListings Listing[]   @relation("ListingVolunteer")
  createdOrders   Order[]     @relation("OrderCreator")

  // Auth relationships
  accounts       Account[]
  sessions       Session[]

  @@map("users")
}

model Organization {
  id            String   @id @default(cuid())
  name          String   @unique
  logoUrl       String?
  description   String
  facebookUrl   String?
  instagramUrl  String?
  websiteUrl    String?
  stripeAccountId String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  admin         User     @relation("OrganizationAdmin", fields: [adminId], references: [id])
  adminId       String
  causes        Cause[]
  userOrganizations UserOrganization[]

  @@map("organizations")
}

model Cause {
  id            String   @id @default(cuid())
  title         String   @unique
  description   String
  imageUrl      String?
  targetGoal    Float?
  startDate     DateTime
  endDate       DateTime?
  status        CauseStatus @default(ACTIVE)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  organization  Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  listings      Listing[]
  donations     Donation[]

  @@map("causes")
}

model Listing {
  id            String   @id @default(cuid())
  title         String   @unique
  description   String
  price         Float
  imageUrl      String?
  quantity      Int?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Stripe fields
  stripeProductId String?
  stripePriceId   String?
  stripePaymentLink String?

  // Relationships
  cause         Cause    @relation(fields: [causeId], references: [id])
  causeId       String
  volunteer     User     @relation("ListingVolunteer", fields: [volunteerId], references: [id])
  volunteerId   String
  orders        Order[]

  @@map("listings")
}

model Order {
  id            String   @id @default(cuid())
  buyerEmail    String
  paymentStatus String   // e.g., "Paid", "Refunded"
  fulfillmentStatus String // "Ordered", "In Progress", "Ready", "Fulfilled"
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relationships
  listing       Listing  @relation(fields: [listingId], references: [id])
  listingId     String
  creator       User     @relation("OrderCreator", fields: [creatorId], references: [id])
  creatorId     String

  @@map("orders")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole     @default(VOLUNTEER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
}

enum CauseStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum OrderStatus {
  ORDERED
  IN_PROGRESS
  READY
  FULFILLED
}

model Donation {
  id            String   @id @default(cuid())
  amount        Float
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  status        PaymentStatus @default(PENDING)

  // Relationships
  cause         Cause    @relation(fields: [causeId], references: [id])
  causeId       String

  @@map("donations")
} 