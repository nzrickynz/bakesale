// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin", "darwin-arm64"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

enum UserRole {
  SUPER_ADMIN
  ORG_ADMIN
  VOLUNTEER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  passwordHash  String
  role          UserRole  @default(ORG_ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Organization relationships
  adminOf           Organization[]     @relation("OrganizationAdmin")
  userOrganizations UserOrganization[]

  // Volunteer relationships
  managedListings Listing[] @relation("ListingVolunteer")
  createdOrders   Order[]   @relation("OrderCreator")

  // Invitation relationships
  sentInvitations     VolunteerInvitation[] @relation("InvitedBy")
  receivedInvitations VolunteerInvitation[] @relation("InvitedUser")

  // Auth relationships
  accounts Account[]
  sessions Session[]

  passwordResets PasswordReset[]

  @@map("users")
}

model Organization {
  id           String   @id @default(cuid())
  name         String   @unique
  logoUrl      String?
  description  String
  facebookUrl  String?
  instagramUrl String?
  websiteUrl   String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relationships
  admin             User                  @relation("OrganizationAdmin", fields: [adminId], references: [id])
  adminId           String
  causes            Cause[]
  userOrganizations UserOrganization[]
  invitations       VolunteerInvitation[]
  assignedAdmins    UserOrganization[]   @relation("OrganizationAdmin")

  // Add relation to listings
  listings          Listing[]

  @@map("organizations")
}

model Cause {
  id          String      @id @default(cuid())
  title       String      @unique
  description String
  imageUrl    String?
  targetGoal  Float?
  startDate   DateTime
  endDate     DateTime?
  status      CauseStatus @default(ACTIVE)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  listings       Listing[]

  @@index([organizationId])
  @@map("causes")
}

model Listing {
  id          String   @id @default(cuid())
  title       String   @unique
  description String
  price       Float
  imageUrl    String?
  paymentLink String? // User-provided payment link
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  cause       Cause   @relation(fields: [causeId], references: [id])
  causeId     String
  volunteer   User    @relation("ListingVolunteer", fields: [volunteerId], references: [id])
  volunteerId String
  orders      Order[]
  assignedVolunteers UserOrganization[] @relation("ListingVolunteer")

  // Add organizationId to establish relationship with Organization
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String

  @@map("listings")
}

model Order {
  id                String      @id @default(cuid())
  buyerEmail        String
  fulfillmentStatus OrderStatus @default(ORDERED)
  createdAt         DateTime    @default(now())
  updatedAt         DateTime    @updatedAt

  // Relationships
  listing   Listing @relation(fields: [listingId], references: [id])
  listingId String
  creator   User    @relation("OrderCreator", fields: [creatorId], references: [id])
  creatorId String

  @@map("orders")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model UserOrganization {
  id             String       @id @default(cuid())
  userId         String
  organizationId String
  role           UserRole     @default(VOLUNTEER)
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedListings Listing[]  @relation("ListingVolunteer")
  assignedOrganizations Organization[] @relation("OrganizationAdmin")

  @@unique([userId, organizationId])
}

enum CauseStatus {
  DRAFT
  ACTIVE
  COMPLETED
  CANCELLED
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum OrderStatus {
  ORDERED
  IN_PROGRESS
  READY
  FULFILLED
}

model VolunteerInvitation {
  id         String           @id @default(cuid())
  email      String
  token      String           @unique
  status     InvitationStatus @default(PENDING)
  role       UserRole         @default(VOLUNTEER)
  expiresAt  DateTime
  acceptedAt DateTime?
  declinedAt DateTime?
  createdAt  DateTime         @default(now())
  updatedAt  DateTime         @updatedAt

  // Relationships
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  invitedBy      User         @relation("InvitedBy", fields: [invitedById], references: [id])
  invitedById    String
  invitedUser    User?        @relation("InvitedUser", fields: [invitedUserId], references: [id])
  invitedUserId  String?

  @@unique([email, organizationId])
  @@map("volunteer_invitations")
}

model PasswordReset {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expires   DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([token])
}
